// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: enrollment.sql

package db

import (
	"context"
	"time"
)

const createEnrollment = `-- name: CreateEnrollment :one
INSERT INTO enrollments (
    enrollment_date, 
    student_id, 
    course_id
) VALUES (
  $1, $2, $3
)
RETURNING enrollment_id, enrollment_date, student_id, course_id, created_at
`

type CreateEnrollmentParams struct {
	EnrollmentDate time.Time `json:"enrollment_date"`
	StudentID      int32     `json:"student_id"`
	CourseID       int32     `json:"course_id"`
}

func (q *Queries) CreateEnrollment(ctx context.Context, arg CreateEnrollmentParams) (Enrollment, error) {
	row := q.db.QueryRowContext(ctx, createEnrollment, arg.EnrollmentDate, arg.StudentID, arg.CourseID)
	var i Enrollment
	err := row.Scan(
		&i.EnrollmentID,
		&i.EnrollmentDate,
		&i.StudentID,
		&i.CourseID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEnrollment = `-- name: DeleteEnrollment :exec
DELETE FROM enrollments
WHERE enrollment_id = $1
`

func (q *Queries) DeleteEnrollment(ctx context.Context, enrollmentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEnrollment, enrollmentID)
	return err
}

const getEnrollment = `-- name: GetEnrollment :one
SELECT enrollment_id, enrollment_date, student_id, course_id, created_at FROM enrollments
WHERE enrollment_id = $1 LIMIT 1
`

func (q *Queries) GetEnrollment(ctx context.Context, enrollmentID int32) (Enrollment, error) {
	row := q.db.QueryRowContext(ctx, getEnrollment, enrollmentID)
	var i Enrollment
	err := row.Scan(
		&i.EnrollmentID,
		&i.EnrollmentDate,
		&i.StudentID,
		&i.CourseID,
		&i.CreatedAt,
	)
	return i, err
}

const listEnrollment = `-- name: ListEnrollment :many
SELECT enrollment_id, enrollment_date, student_id, course_id, created_at FROM enrollments
ORDER BY enrollment_id
LIMIT $1
OFFSET $2
`

type ListEnrollmentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEnrollment(ctx context.Context, arg ListEnrollmentParams) ([]Enrollment, error) {
	rows, err := q.db.QueryContext(ctx, listEnrollment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enrollment
	for rows.Next() {
		var i Enrollment
		if err := rows.Scan(
			&i.EnrollmentID,
			&i.EnrollmentDate,
			&i.StudentID,
			&i.CourseID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
