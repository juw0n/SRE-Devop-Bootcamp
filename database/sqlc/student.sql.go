// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package db

import (
	"context"
	"time"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
  first_name,
  middle_name,
  last_name,
  gender,
  date_of_birth,
  phone_number,
  email,
  year_of_enroll,
  country,
  major
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING student_id, first_name, middle_name, last_name, gender, date_of_birth, phone_number, email, year_of_enroll, country, major, created_at
`

type CreateStudentParams struct {
	FirstName    string    `json:"first_name"`
	MiddleName   string    `json:"middle_name"`
	LastName     string    `json:"last_name"`
	Gender       string    `json:"gender"`
	DateOfBirth  time.Time `json:"date_of_birth"`
	PhoneNumber  string    `json:"phone_number"`
	Email        string    `json:"email"`
	YearOfEnroll int32     `json:"year_of_enroll"`
	Country      string    `json:"country"`
	Major        string    `json:"major"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Gender,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.Email,
		arg.YearOfEnroll,
		arg.Country,
		arg.Major,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Gender,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Email,
		&i.YearOfEnroll,
		&i.Country,
		&i.Major,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, studentID)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, first_name, middle_name, last_name, gender, date_of_birth, phone_number, email, year_of_enroll, country, major, created_at FROM students
WHERE student_id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, studentID int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Gender,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Email,
		&i.YearOfEnroll,
		&i.Country,
		&i.Major,
		&i.CreatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, first_name, middle_name, last_name, gender, date_of_birth, phone_number, email, year_of_enroll, country, major, created_at FROM students
ORDER BY student_id
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Gender,
			&i.DateOfBirth,
			&i.PhoneNumber,
			&i.Email,
			&i.YearOfEnroll,
			&i.Country,
			&i.Major,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
  set 
  first_name = $2,
  middle_name = $3,
  last_name = $4,
  gender = $5,
  date_of_birth = $6,
  phone_number = $7,
  email = $8,
  year_of_enroll = $9,
  country = $10,
  major = $11
WHERE student_id = $1
RETURNING student_id, first_name, middle_name, last_name, gender, date_of_birth, phone_number, email, year_of_enroll, country, major, created_at
`

type UpdateStudentParams struct {
	StudentID    int32     `json:"student_id"`
	FirstName    string    `json:"first_name"`
	MiddleName   string    `json:"middle_name"`
	LastName     string    `json:"last_name"`
	Gender       string    `json:"gender"`
	DateOfBirth  time.Time `json:"date_of_birth"`
	PhoneNumber  string    `json:"phone_number"`
	Email        string    `json:"email"`
	YearOfEnroll int32     `json:"year_of_enroll"`
	Country      string    `json:"country"`
	Major        string    `json:"major"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.StudentID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Gender,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.Email,
		arg.YearOfEnroll,
		arg.Country,
		arg.Major,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Gender,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Email,
		&i.YearOfEnroll,
		&i.Country,
		&i.Major,
		&i.CreatedAt,
	)
	return i, err
}
